## Moxie Project Descriptor

The Moxie project descriptor defines the structure, metadata, and dependencies of your project.  It is the heart of Moxie and is used by all Moxie Extension tasks.

### Metadata Keys
<table class="table table-striped table-bordered table-condensed">
<tbody>
<tr><th>name</th>            <td></td></tr>
<tr><th>description</th>     <td></td></tr>
<tr><th>organization</th>    <td></td></tr>
<tr><th>organizationUrl</th> <td></td></tr>
<tr><th>issuesUrl</th>       <td></td></tr>
<tr><th>forumUrl</th>        <td></td></tr>
<tr><th>blogUrl</th>         <td></td></tr>
<tr><th>socialNetworkUrl</th><td></td></tr>
<tr><th>ciUrl</th>           <td></td></tr>
<tr><th>url</th>             <td></td></tr>
<tr><th>inceptionYear</th>   <td></td></tr>
</tbody>
</table>

### Artifact Keys
<table class="table table-striped table-bordered table-condensed">
<tbody>
<tr><th>groupId</th>       <td></td></tr>
<tr><th>artifactId</th>    <td></td></tr>
<tr><th>version</th>       <td></td></tr>
<tr><th>releaseVersion</th><td></td></tr>
<tr><th>releaseDate</th>   <td></td></tr>
</tbody>
</table>

<hr/>

### Apply
<div class="row">
<div class="span8">
special behaviors for your build script
<dl>
 <dt>eclipse</dt>
 <dd>creates Eclipse .project and .classpath files</dd>
 <dt>pom</dt>
 <dd>creates and maintains a Maven pom.xml file</dd>
 <dt>cache</dt>
 <dd>build and caches a transitive dependency solution for re-use to accelerate builds (does not apply to SNAPSHOTs)</dd>
 <dt>debug</dt>
 <dd>enable Moxie's debug logging</dd>
 <dt>color</dt>
 <dd>console logging will use ansi color escape sequences</dd>
</dl>
</div>

<div class="span4">
---YAML---
apply: eclipse, pom, cache
---YAML---

</div>
</div>

<hr/>

dependencyDirectory

repositories

parent

### Source Directories

<div class="row">
<div class="span8">
Example
</div>

<div class="span4">
---YAML---
sourceDirectories: 
- compile 'src/main/core'
- compile 'src/main/pro'
- compile 'src/main/all'
- compile 'src/main/resources'
- { scope: 'test', dir: 'src/test/java' }
---YAML---

</div>
</div>

<hr/>

### Properties

<div class="row">
<div class="span8">
used in dependency management and dependencies
exported as ant properties
</div>

<div class="span4">
---YAML---
properties: {
  jgit.version : 1.3.0.201202151440-r
}
---YAML---

</div>
</div>

<hr/>

### Dependency Management

<div class="row">
<div class="span8">
Managed dependencies are used to specify versions of dependencies if those versions are not specified in the project's build.moxie.
</div>

<div class="span4">
---YAML---
dependencyManagement:
- 'org.apache.ant:ant:1.8.3'
- 'junit:junit:4.11'
---YAML---

</div>
</div>

<hr/>

### Dependencies

<div class="row">
<div class="span8">
Example

scopes, @ext, excludes
</div>

<div class="span4">
---YAML---
dependencies:
- compile 'org.apache.ant:ant'
- compile 'org.apache.commons-lang3:3.1'
- test 'junit'
---YAML---

</div>
</div>

## Advanced Settings

### Dependency Aliases

Dependency aliases allow you to specify shorthand notation for a dependency which will be resolved at runtime to the full coordinates.

---YAML---
dependencyAliases: {
	junit: 'junit:junit'
	testng: 'org.testng:testng'
	cobertura: 'net.sourceforge.cobertura:cobertura'
	emma: 'emma:emma'
	jacoco: 'org.jacoco:org.jacoco.ant'
	'mx:jgit' : 'org.eclipse.jgit:org.eclipse.jgit'
	'mx:markdownpapers' : 'org.tautua.markdownpapers:markdownpapers-core'
	'mx:rhino' : 'org.mozilla:rhino'
}
---YAML---

### Dependency Overrides

Dependency overrides are used to redefine the dependencies of released/published POMs from other projects.  The most common use case would be to add undeclared dependencies for old POMs or to purposefully exclude dependencies from specific scopes.

Moxie uses this feature to simplify specification of "build" scope dependencies so that enabling Cobertura, Emma, or TestNG is as easy as adding a single build dependency.

You must declare the full coordinates of the dependency to tweak.  Property substitution is prohibited.  You may specify the scopes for which your override applies.  If no scope is specified ALL scopes are assumed.

<p class="text-error">Be very careful when using dependency overrides!</p>

---YAML---
dependencyOverrides: {

cobertura: redefine ant as optional for build scope
	'net.sourceforge.cobertura:cobertura:1.9.4.1' : {
		scope: build
		dependencies:
		- compile 'oro:oro:2.0.8'
		- compile 'asm:asm:3.0'
		- compile 'asm:asm-tree:3.0'
		- compile 'log4j:log4j:1.2.9'
		- compile 'org.apache.ant:ant:1.7.0' optional
	}

emma: add emma_ant dependency for build scope
    'emma:emma:2.1.5320' : {
		scope: build
		dependencies:
		- compile 'emma:emma_ant:2.1.5320'
	}
}
---YAML---

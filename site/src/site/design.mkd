## Design

Be just enough.  Be useful.  Don't overreach.  Don't impose.  [Don't Repeat Yourself][DRY].

Moxie is not designed to be Maven.  It is designed to be an Ant enhancement for a Maven repository world.

### Dependency Management

Moxie does *not* use [Ivy][] or [Maven][] to retrieve artifacts nor to solve transitive dependencies.  It has it's own solution engine written based on the Maven, Ivy, and Gradle documentation.

Moxie employs a two-pass solver which is executed for each scope (compile, test, etc).

1. The first pass retrieves POMs for all dependencies regardless of scope by walking up and down the dependency graph.
2. The second pass generates the complete tree of resolved artifacts and then employs the *nearest* rule to eliminate duplicates in the graph.

### Version Ranges

Version ranges are the ugly duckling of Moxie.  They are only partially supported.  Maven (Aether) has a very sophisticated mechanism for dealing with version ranges which Moxie will never attempt to reproduce.  IMHO version ranges are an unnecessary implementation complexity.  Moxie will resolve the highest version it can by consulting the maven-metadata.xml file when a version range specification is detected.

### Reference links

- [Maven dependency resolution][mvnresolution]
- [Maven SNAPSHOT resolution][mvnsnapshot]
- [Maven's POM XML config file reference][pomxml]
- [Maven properties reference][mvnproperties]
- [Maven 3 Compatibility Notes][mvn3notes]
- [Maven settings.xml reference][mvnsettings]
- [Maven LifeCycle reference][mvnlifecycle]
- [Ivy's XML config file reference][ivyxml]
- [Ivy Main Concepts][ivyconcepts]
- [Gradle Cache Design][gradlecache]
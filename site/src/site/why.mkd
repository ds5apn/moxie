## Why not Ant+Ivy?

[Ivy](http://ant.apache.org/ivy) is definitely a more featureful dependency manager.  But I hated the idea of adding another xml file.  Ivy also does nothing to decrease the complexity or verbosity of Ant build scripts.  And it is a bit too large to embed within a repository.

## Why not Gradle?

Conceptually I like the idea of Gradle, but the IDE support is lacking and it does not seem much more debuggable than Ant.

## Why not Maven?

There is much to admire and respect about Maven.

Maven has done some tremendous things and has moved the Java ecosystem forward.  But I want to exert control over my build, not have my build exert control over me.  Maven is a fantastic *automated build* system but I want a *build automation* tool, and for now that is Ant+Moxie.

### Lessons learned from Maven

1. a centralized repository of project artifacts accessible by http is brilliant
2. transitive dependency management is *really* brilliant
3. convention-over-configuration simplifies the build process, but convention-instead-of-configuration is too restrictive


## Why Moxie?

During Moxie's development I have asked myself that question many times, and I still ask it.  
When there is such pressure to move to Maven is there a need, or even room, for an alternative?

My answer is, yes.

And my reasons are two-fold:

1. Size Matters 
2. Ubiquity Matters

### Size Matters

Moxie is a small, lightweight dependency retriever with some convenience tasks for building and packaging Java sources, generating project documentation, and setting up an Eclipse project.

Moxie comes in three package variants: core, pro, and all.  Core, the smallest variant, gives you transitive dependency retrieval, similar to Ivy, at 1/10th the footprint. All, the largest variant, is < 400KB.  Either of these can be embedded within a repository.

Why would you want to embed Moxie in your project's repository?

### Ubiquity Matters 

Every Java IDE ships with Ant support built-in.  It is *the* ubiqtuitous Java build technology of the last 10 years.  Embedding Moxie in your project and registering the Moxie tasks and targets in your build script turbo-charges your Ant power without requiring special tooling on developer workstations or a continuous integration server.

### Limitations

Some will consider Moxie [rinky-dink](http://www.merriam-webster.com/dictionary/rinky-dink), and I have to agree that it is less capable than the alternatives.  
If the following limitations are of concern, then Moxie may not suit your needs. 

1. Moxie employs the Maven 2 transitive dependency resolution mechanism<div class="alert">Currently, Maven 2.0 only supports using the "nearest definition" which means that it will use the version of the closest dependency to your project in the tree of dependencies. You can always guarantee a version by declaring it explicitly in your project's POM. Note that if two dependency versions are at the same depth in the dependency tree ... the first declaration wins.</div>
2. Moxie does not support version ranges<div class="alert">I can see the attraction of version ranges, but in practice it seems that they are discouraged because they lead to build reproducibilty issues.  Not supporting version ranges simplifies Moxie while at the same time enforcing dependency clarity.</alert>
3. Moxie only supports building JARs and WARs
4. Moxie is not designed to build enterprise-level software

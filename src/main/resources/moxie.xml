<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright 2012 James Moger
   
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
 
      http://www.apache.org/licenses/LICENSE-2.0
 
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<project name="moxie" xmlns:mx="antlib:org.moxie" xmlns:cobertura="antlib:net.sourceforge.cobertura"
	xmlns:emma="antlib:com.vladium.emma">
	
	<!-- Determine the source jar for this import/include. -->
	<!-- This JavaScript sneakery assumes this XML file is -->
	<!-- located within a Moxie jar file and it is being -->
	<!-- imported or included from a project build script. -->
	<script language="javascript">
		<![CDATA[
			var url = project.getProperty("ant.file.moxie")
		
			// strip leading jar:file:
			var index = url.lastIndexOf("file:");
			var jar = url.substring(index + 5);
		
			// strip trailing bang
			var bang = jar.lastIndexOf("!");
			if (bang > -1) {
				jar = jar.substring(0, bang);
			}
			project.setProperty("moxie.jar", jar);
		]]>
	</script>
	
	<!-- Define the folder where the Moxie jar is located -->
	<dirname property="moxie.dir" file="${moxie.jar}" />
	
	<!-- Make the Moxie extensions folder -->
	<property name="moxie.extensions" value="${user.home}/.moxie/extensions" />
	<mkdir dir="${moxie.extensions}" />

	<!-- Define the Moxie classpath -->
	<path id="moxie.classpath">
		<pathelement location="${moxie.jar}" />
		<fileset dir="${moxie.dir}" includes="mxext-*.jar" />
		<fileset dir="${moxie.extensions}" includes="*.jar" />
	</path>
	
	<!-- Define Moxie tasks -->
	<taskdef resource="tasks.properties" classpathref="moxie.classpath" uri="antlib:org.moxie" loaderref="moxie.loader" />

	<!--
	
	The targets in this script are designed to provide similar functionality to
	the Maven build lifecycle phases.
	
	http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
	
	-->

	<!--
	    moxie.init
	-->
	<target name="init" description="validates project configuration, retrieves depdendencies, and configures ANT properties">
		<mx:init />
	</target>

	<!--
	    moxie.compile
	-->
	<target name="compile" depends="init" description="compile the source code of the project">
		<!-- TODO inject version and compile -->
		<mx:javac />
	</target>

	<!--
	    moxie.test
	-->
	<target name="test" depends="compile" description="test the compiled source code using a suitable unit testing framework">
		<!-- compile the test sources -->
		<mx:javac scope="test" />
		
		<!-- generate unit test info into build/tests -->
		<property name="unit.test.build" value="${mxp.outputFolder}/tests" />
		<delete dir="${unit.test.build}" quiet="true" />
		<mkdir dir="${unit.test.build}" />
		
		<!-- generate unit test info into target/tests -->
		<property name="unit.test.report" value="${mxp.reportsFolder}/tests" />
		<delete dir="${unit.test.report}" quiet="true" />
		<mkdir dir="${unit.test.report}" />

		<!-- instrument classes for code coverages into build/instrumented-classes -->
		<property name="unit.test.instrumented" value="${mxp.outputFolder}/instrumented-classes" />
		<delete dir="${unit.test.instrumented}" quiet="true" />
		<mkdir dir="${unit.test.instrumented}" />

		<!-- generate code coverage report into target/coverage -->
		<property name="code.coverage.report" value="${mxp.reportsFolder}/coverage" />
		<delete dir="${code.coverage.report}" />
		<mkdir dir="${code.coverage.report}" />

		<!-- delete Corbertura metadata -->
		<property name="cobertura.data" value="${mxp.outputFolder}/cobertura.ser" />
		<delete file="${cobertura.data}" quiet="true" />

		<!-- delete EMMA metadata -->
		<property name="emma.data" value="${mxp.outputFolder}/metadata.emma" />
		<delete file="${emma.data}" quiet="true" />

		<!-- fileset for test classes -->
		<fileset id="mixed.tests" dir="${mxp.test.outputFolder}">			      
			<include name="**/*Test.class"/>
		</fileset>
		
		<!-- classpath for tests -->
		<!-- instrumented classes, build libraries (Corbertura, Emma, etc) -->
		<!-- and project compile/test classes -->
		<path id="unit.test.classpath">
			<pathelement path="${unit.test.instrumented}" />
			<path refid="mxr.test.classpath" />
			<path refid="mxr.build.classpath" />
			<pathelement location="${mxp.test.outputFolder}"/>
		</path>
		
		<!-- execution classpath for tests -->
		<path id="execution.test.classpath">
			<path refid="mxr.test.classpath" />
			<path refid="mxr.build.classpath" />
			<path refid="moxie.classpath"/>
		</path>
		
		<!-- Automatic instrumentation for Code Coverage -->
		<mx:if>
			<available classpathref="mxr.build.classpath" classname="net.sourceforge.cobertura.ant.InstrumentTask" />
			<then>
				<!-- instrument for Cobertura code coverage -->
				<taskdef name="instrument" classname="net.sourceforge.cobertura.ant.InstrumentTask" classpathref="mxr.build.classpath" uri="antlib:net.sourceforge.cobertura" />
				<cobertura:instrument datafile="${cobertura.data}" todir="${unit.test.instrumented}">
		    		<fileset dir="${mxp.compile.outputFolder}">
		        		<include name="**/*.class"/>
		    		</fileset>
				</cobertura:instrument>
			</then>
		<elseif>
			<available classpathref="mxr.build.classpath" classname="com.vladium.emma.emmaTask" />
			<then>
				<!-- instrument for EMMA code coverage -->
				<taskdef name="emma" classname="com.vladium.emma.emmaTask" classpathref="mxr.build.classpath" uri="antlib:com.vladium.emma" />
				<taskdef name="instr" classname="com.vladium.emma.instr.instrTask" classpathref="mxr.build.classpath" uri="antlib:com.vladium.emma" />
				<emma:emma>
					<emma:instr metadatafile="${emma.data}" merge="true" destdir="${unit.test.instrumented}" >
					 	<instrpath>
							<pathelement location="${mxp.compile.outputFolder}"/>
						</instrpath>
					</emma:instr>
				</emma:emma>
			</then>
		</elseif>
		</mx:if>

		<!-- Execute unit tests -->
	    <mx:if>
	    	<available classpathref="execution.test.classpath" classname="org.testng.TestNGAntTask" />
			<then>
				<!-- Execute unit tests with TestNG -->
			    <mx:if>
			    	<available classpathref="execution.test.classpath" classname="org.uncommons.reportng.HTMLReporter" />
					<then>
						<!-- ReportNG -->
						<property name="testng.useDefaultListeners" value="false" />
						<property name="testng.listeners" value="org.uncommons.reportng.HTMLReporter,org.uncommons.reportng.JUnitXMLReporter" />
					</then>
			    	<else>
						<!-- Standard TestNG output -->
						<property name="testng.useDefaultListeners" value="true" />
						<property name="testng.listeners" value="" />
					</else>
				</mx:if>
			    		
				<!-- Execute TestNG -->
				<taskdef name="testng" classname="org.testng.TestNGAntTask" classpathref="execution.test.classpath" />
				<testng mode="mixed" classfilesetref="mixed.tests" workingDir="${basedir}" outputdir="${unit.test.report}"
					suitename="${mxp.name} Test Suite" useDefaultListeners="${testng.useDefaultListeners}"
					listeners="${testng.listeners}" failureProperty="unit.test.failed">
					
					<classpath refid="unit.test.classpath" />

					<!-- ReportNG properties -->
		          	<sysproperty key="org.uncommons.reportng.title" value="${mxp.name} Test Report"/>
					<sysproperty key="org.uncommons.reportng.coverage-report" value="../coverage/index.html"/>

					<!-- Cobertura system properties -->
					<sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.data}" />

					<!-- EMMA system properties -->
					<sysproperty key="emma.coverage.out.file" file="${emma.data}" />
					<sysproperty key="emma.coverage.out.merge" value="true" />
				</testng>
			</then>
		<elseif>
			<available classpathref="execution.test.classpath" classname="junit.framework.Assert" />
			<then>
				<!-- Execute unit tests with JUnit -->
				<junit fork="true" printsummary="yes" failureProperty="unit.test.failed" showoutput="false">
					
					<classpath refid="unit.test.classpath" />

					<!-- Cobertura system properties -->
					<sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.data}" />

					<!-- EMMA system properties -->
					<sysproperty key="emma.coverage.out.file" file="${emma.data}" />
					<sysproperty key="emma.coverage.out.merge" value="true" />
						
					<batchtest fork="true" todir="${unit.test.build}">
				   		<fileset refid="mixed.tests" />			      
					</batchtest>			
					<formatter type="xml"/>
				</junit>
				
				<junitreport todir="${unit.test.report}">
					<fileset dir="${unit.test.build}">
				    	<include name="TEST-*.xml"/>
				 	</fileset>
					<report format="frames" todir="${unit.test.report}"/>
				</junitreport>
			</then>
		</elseif>
		<else>
			<echo message="skipping unit tests" />
		</else>
		</mx:if>
			
		<!-- Generate Code Coverage report -->
		<mx:if>
			<available classpathref="execution.test.classpath" classname="net.sourceforge.cobertura.ant.ReportTask" />
			<then>
				<!-- report Cobertura code coverage -->
				<taskdef name="report" classname="com.maxtk.cobertura.ReportTask" classpathref="execution.test.classpath" uri="antlib:net.sourceforge.cobertura" />
				<cobertura:report datafile="${cobertura.data}" format="html" destdir="${code.coverage.report}">
					<path refid="mxr.compile.sourcepath" />
				</cobertura:report>
			</then>
		<elseif>
			<available classpathref="execution.test.classpath" classname="com.vladium.emma.report.reportTask" />
			<then>
				<!-- report EMMA code coverage -->
				<taskdef name="report" classname="com.vladium.emma.report.reportTask" classpathref="execution.test.classpath" uri="antlib:com.vladium.emma" />
				<emma:emma>
					<emma:report sourcepathref="mxr.compile.sourcepath" >
						<fileset dir="${mxp.outputFolder}" >
							<include name="*.emma" />
						</fileset>
						<html outfile="${code.coverage.report}/index.html" />
					</emma:report>
				</emma:emma>
			</then>
		</elseif>
		</mx:if>

	</target>
		
	<!--
	    moxie.package
	-->
	<target name="package" depends="test" description="take the compiled code and package it in its distributable format, such as a JAR">
		<mx:jar includeResources="true" packageSources="true" />
	</target>

	<!--
	    moxie.install
	-->
	<target name="install" depends="package" description="install the package into the local repository, for use as a dependency in other projects locally">
		<mx:install />
	</target>
		
	<!--
	    moxie.clean
	-->
	<target name="clean" depends="init" description="clean build and target folders">
		<mx:clean />
	</target>

	<!--
	    moxie.report
	-->
	<target name="report" depends="init" description="generates a dependency report">
		<mx:report />
	</target>

</project>
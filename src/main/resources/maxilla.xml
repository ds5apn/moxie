<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright 2012 James Moger
   
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
 
      http://www.apache.org/licenses/LICENSE-2.0
 
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<project name="maxilla" xmlns:mx="antlib:com.maxtk">
	
	<!-- Determine the source jar for this import/include. -->
	<!-- This JavaScript sneakery assumes this XML file is -->
	<!-- located within a Maxilla jar file and it is being -->
	<!-- imported or included from a project build script. -->
	<dirname file="${ant.file.maxilla}" property="maxilla.import.url"/>
	<script language="javascript">
		<![CDATA[
			// extract the jar path
			url = project.getProperty("maxilla.import.url");
			index = url.lastIndexOf("file:");
			jar = url.substring(index + 5);
			if (jar.endsWith("!")) {
				jar = jar.substring(0, jar.length() - 1);
			}
			project.setProperty("maxilla.jar", jar);
		]]>
	</script>
	
	<!-- Define Maxilla tasks -->
	<taskdef resource="tasks.properties" classpath="${maxilla.jar}" uri="antlib:com.maxtk"/>

	<!-- Set the environment into the ${env} property -->
	<property environment="env" />
	
	<!--
	
	The targets in this script are designed to provide similar functionality to
	the Maven build lifecycle phases.
	
	http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
	
	-->

	<!--
	    maxilla.init
	-->
	<target name="init" description="validates project configuration, retrieves depdendencies, and configures ANT properties">
		<mx:init />
	</target>

	<!--
	    maxilla.compile
	-->
	<target name="compile" depends="init" description="compile the source code of the project">
		<!-- TODO inject version and compile -->
		<mx:javac />
	</target>

	<!--
	    maxilla.test
	-->
	<target name="test" depends="compile" description="test the compiled source code using a suitable unit testing framework">
		<!-- compile the test sources -->
		<mx:javac scope="test" />
		
		<!-- generate unit test info into build/tests -->
		<property name="unit.test.build" value="${mxp.outputFolder}/tests" />
		<delete dir="${unit.test.build}" quiet="true" />
		<mkdir dir="${unit.test.build}" />
		
		<!-- generate unit test info into target/tests -->
		<property name="unit.test.report" value="${mxp.targetFolder}/tests" />
		<delete dir="${unit.test.report}" quiet="true" />
		<mkdir dir="${unit.test.report}" />

		<!-- instrument classes for code coverages into build/instrumented-classes -->
		<property name="unit.test.instrumented" value="${mxp.outputFolder}/instrumented-classes" />
		<delete dir="${unit.test.instrumented}" quiet="true" />
		<mkdir dir="${unit.test.instrumented}" />

		<!-- generate code coverage report into target/coverage -->
		<property name="code.coverage.report" value="${mxp.targetFolder}/coverage" />
		<delete dir="${code.coverage.report}" />
		<mkdir dir="${code.coverage.report}" />

		<!-- delete Corbertura metadata -->
		<property name="cobertura.data" value="${mxp.outputFolder}/cobertura.ser" />
		<delete file="${cobertura.data}" quiet="true" />
		
		<!-- fileset for test classes -->
		<fileset id="mixed.tests" dir="${mxp.test.outputpath}">			      
			<include name="**/*Test.class"/>
		</fileset>
		
		<!-- classpath for tests -->
		<!-- instrumented classes, build libraries (Corbertura, etc), -->
		<!-- and project compile/test classes -->
		<path id="unit.test.classpath">
			<pathelement path="${unit.test.instrumented}" />
			<path refid="mxr.test.classpath" />
			<path refid="mxr.build.classpath" />
			<pathelement location="${mxp.test.outputpath}"/>
		</path>
		
		<!-- execution classpath for tests -->
		<path id="execution.test.classpath">
			<path refid="mxr.test.classpath" />
			<path refid="mxr.build.classpath" />
			<pathelement location="${maxilla.jar}"/>
		</path>
		
		<!-- instrument for Cobertura code coverage -->
		<mx:if>
			<available classpathref="mxr.build.classpath" classname="net.sourceforge.cobertura.ant.InstrumentTask" />
			<then>
				<taskdef name="cobertura-instrument" classname="net.sourceforge.cobertura.ant.InstrumentTask" classpathref="mxr.build.classpath" />
				<cobertura-instrument datafile="${cobertura.data}" todir="${unit.test.instrumented}">
		    		<fileset dir="${mxp.compile.outputpath}">
		        		<include name="**/*.class"/>
		    		</fileset>
				</cobertura-instrument>
			</then>
		</mx:if>

		<!-- execute the tests -->
	    <mx:if>
	    	<available classpathref="execution.test.classpath" classname="org.testng.TestNGAntTask" />
			<then>
				<!-- Execute unit tests with TestNG -->
				<taskdef name="testng" classname="org.testng.TestNGAntTask" classpathref="execution.test.classpath" />
				<testng mode="mixed" classfilesetref="mixed.tests" workingDir="${basedir}" outputdir="${unit.test.report}">
					<classpath refid="unit.test.classpath" />
					<sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.data}" />
				</testng>
			</then>
		<elseif>
			<available classpathref="execution.test.classpath" classname="junit.framework.Assert" />
			<then>
				<!-- Execute unit tests with JUnit -->
				<junit fork="true" printsummary="yes" haltonfailure="no" showoutput="false">
					<classpath refid="unit.test.classpath" />
					<sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.data}" />
						
					<batchtest fork="true" todir="${unit.test.build}">
				   		<fileset refid="mixed.tests" />			      
					</batchtest>			
					<formatter type="xml"/>
				</junit>
				
				<junitreport todir="${unit.test.report}">
					<fileset dir="${unit.test.build}">
				    	<include name="TEST-*.xml"/>
				 	</fileset>
					<report format="frames" todir="${unit.test.report}"/>
				</junitreport>
			</then>
		</elseif>
		<else>
			<echo message="skipping unit tests" />
		</else>
		</mx:if>
			
		<!-- report Cobertura code coverage -->
		<mx:if>
			<available classpathref="execution.test.classpath" classname="net.sourceforge.cobertura.ant.ReportTask" />
			<then>
				<!-- Custom Maxilla cobertura-report task for path reference support -->
				<taskdef name="cobertura-report" classname="com.maxtk.cobertura.ReportTask" classpathref="execution.test.classpath" />
				<cobertura-report datafile="${cobertura.data}" format="html" destdir="${code.coverage.report}">
					<path refid="mxr.compile.sourcepath" />
				</cobertura-report>
			</then>
		</mx:if>

	</target>
		
	<!--
	    maxilla.package
	-->
	<target name="package" depends="test" description="take the compiled code and package it in its distributable format, such as a JAR">
		<mx:jar includeResources="true" packageSources="true" />
	</target>

	<!--
	    maxilla.install
	-->
	<target name="install" depends="package" description="install the package into the local repository, for use as a dependency in other projects locally">
		<mx:install />
	</target>
		
	<!--
	    maxilla.clean
	-->
	<target name="clean" depends="init" description="clean build and target folders">
		<mx:clean />
	</target>

	<!--
	    maxilla.report
	-->
	<target name="report" depends="init" description="generates a dependency report">
		<mx:report />
	</target>

</project>